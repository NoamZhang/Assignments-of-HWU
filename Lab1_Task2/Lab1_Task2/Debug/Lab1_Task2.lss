
Lab1_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ce  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000631  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000260  00000000  00000000  00000f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  0000155f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000162a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Delay>:
#include <avr/io.h> 
#include <avr/interrupt.h>

void Delay()
 {
	TCNT1 = 0x6769;
  80:	89 e6       	ldi	r24, 0x69	; 105
  82:	97 e6       	ldi	r25, 0x67	; 103
  84:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  88:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0x00; 
  8c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x05; 
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	while((TIFR1&(1<<TOV1))==0) 
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	fe cf       	rjmp	.-4      	; 0x96 <Delay+0x16>
	{}	
	TCCR1B = 0; 
  9a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIFR1 = (1<<TOV1); 
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	86 bb       	out	0x16, r24	; 22
  a2:	08 95       	ret

000000a4 <main>:
 } 
  
int main(void) 
{ 
	CLKPR = (1<<CLKPCE);
  a4:	e1 e6       	ldi	r30, 0x61	; 97
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 e8       	ldi	r24, 0x80	; 128
  aa:	80 83       	st	Z, r24
	CLKPR = (1<<CLKPS0);
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24
	DDRB = 0xFF;
  b0:	9f ef       	ldi	r25, 0xFF	; 255
  b2:	94 b9       	out	0x04, r25	; 4
	DDRD = 0x00;
  b4:	1a b8       	out	0x0a, r1	; 10
	EIMSK = (1<<INT0);
  b6:	8d bb       	out	0x1d, r24	; 29
	sei();
  b8:	78 94       	sei
  ba:	ff cf       	rjmp	.-2      	; 0xba <main+0x16>

000000bc <__vector_1>:
	while(1);
} 


 ISR (INT0_vect)
 {
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	6f 93       	push	r22
  d0:	7f 93       	push	r23
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	   PORTB = 0x01;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	85 b9       	out	0x05, r24	; 5
	   Delay();
  e2:	0e 94 40 00 	call	0x80	; 0x80 <Delay>
	   PORTB = 0x02;
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	85 b9       	out	0x05, r24	; 5
	   Delay();
  ea:	0e 94 40 00 	call	0x80	; 0x80 <Delay>
	   PORTB = 0x04;
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	85 b9       	out	0x05, r24	; 5
	   Delay();
  f2:	0e 94 40 00 	call	0x80	; 0x80 <Delay>
	   PORTB = 0x00;
  f6:	15 b8       	out	0x05, r1	; 5
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	bf 91       	pop	r27
  fe:	af 91       	pop	r26
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	7f 91       	pop	r23
 106:	6f 91       	pop	r22
 108:	5f 91       	pop	r21
 10a:	4f 91       	pop	r20
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
